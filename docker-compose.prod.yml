services:
  db:
    image: pgvector/pgvector:pg17
    container_name: blog-postgres-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${EXTERNAL_IP}:${PG_EXTERNAL_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal

  redis:
    image: redis:7
    container_name: blog-redis-db
    restart: always
    ports:
      - "127.0.0.1:${REDIS_EXTERNAL_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - internal

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: blog-backend-go-app
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      APP_ENV: ${APP_ENV}
      PORT: ${APP_PORT}
      GIN_MODE: release
      SEARXNG_URL: ${SEARXNG_URL}
    ports:
      - "127.0.0.1:${APP_PORT}:${APP_PORT}"
    depends_on:
      - db
      - redis
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - internal
      - public
      - ollama_net
    volumes:
      - ./backend/cmd/server/logs:/app/logs

  frontend:
    container_name: blog-frontend-nextjs-app
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    env_file:
      - .env
    ports:
        - "127.0.0.1:9009:8088"
    depends_on:
      - backend
    restart: always
    networks:
      - public
  
  searxng:
    image: docker.io/searxng/searxng:latest
    container_name: searxng
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./searxng:/etc/searxng:rw
      - searxng-data:/var/cache/searxng:rw
    environment:
      - SEARXNG_SECRET=${SEARXNG_SECRET}
      - SEARXNG_BASE_URL=${SEARXNG_URL}
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - public
  extractor:
    build:
      context: ./extractor
      dockerfile: Dockerfile
    container_name: dev-extractor
    environment:
      TESS_LANGS: tha+eng
      FLASK_ENV: production
    ports:
      - "127.0.0.1:5002:5002"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:5002/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      - backend


volumes:
  postgres_data:
  redis_data:
  searxng-data:
  

networks:
  internal:
    driver: bridge
  public:
    driver: bridge
  ollama_net:
    external: true
